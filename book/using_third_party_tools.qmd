---
title: "Escaneo, Monitoreo y Uso de Herramientas de Terceros"
---

Este artículo aborda las prácticas recomendadas y herramientas clave para asegurar y monitorear tus contenedores.

## Requisitos Técnicos

Para asegurar la estabilidad e integridad de un contenedor, es necesario realizar un monitoreo constante. Aunque los contenedores están diseñados para ser eficientes, no están exentos de posibles caídas de rendimiento o consumo innecesario de recursos. El monitoreo también permite identificar anomalías producto de una vulneración del sistema.

El fin de utilizar estas herramientas de terceros es garantizar la seguridad. Aún después de un escaneo de seguridad previo al despliegue, es posible no encontrar vulnerabilidades recientes. Por ello, es necesario el monitoreo posterior al despliegue.

### Lista de requisitos:

- Conocimientos básicos de Docker.
- Acceso a servicios de la nube (AWS, Azure, GCP).
- Herramientas de línea de comandos como `docker` y configuraciones de red básicas.

### Escanear Vulnerabilidades usando Grype

Grype es una herramienta popular para escanear imágenes de contenedores y evaluar vulnerabilidades en tiempo de construcción o ejecución. Proporciona capacidades avanzadas para analizar imágenes, verificando componentes como:

- Presencia de vulnerabilidades conocidas.
- Cumplimiento de políticas de seguridad específicas.
- Identificación de componentes obsoletos o inseguros.

#### Configuración Básica de Grype

1. **Instalación**:
   Puedes instalar Grype utilizando los siguientes comandos:
   
   ```bash
   curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
   ```

2. **Escaneo de una Imagen**:
   Para agregar una imagen y escanearla, usa los siguientes comandos:
   
   ```bash
   cd ./grype/bin/
   ./grype docker:nginx:latest
   ```

   Se puede crear un archivo de log para revisar las vulnerabilidades encontradas:

   ```bash
   ./grype -o table docker:practica-microservicios-express-service:latest > log.txt
   ```
3. **Revisión de Resultados**:
   Los resultados mostrarán vulnerabilidades categorizadas según su gravedad (baja, media, alta, crítica) y posibles soluciones recomendadas.

### Monitoreo Local utilizando Docker Stats

Nativamente, Docker permite monitorear las estadísticas de los contenedores en ejecución. Sin embargo, estas estadísticas son breves y sirven principalmente para monitoreo general. Docker Stats se recomienda en caso de que se requiera un despliegue aislado de contenedores en un "sandbox" para esclarecer posibles sospechas. 

Para acceder a Docker Stats, utiliza el comando:

```bash
docker stats <container-id>
```

#### Usando la API de Stats

La API de Stats otorga un conjunto de resultados más comprensibles en formato JSON. También, a través de la configuración de una red, permite monitorear otras máquinas host. Esto lo hace exponiendo el daemon de Docker para que acepte solicitudes TCP.

Sin embargo, es importante mencionar que exponer la API del daemon de Docker puede ser una vulnerabilidad crítica del sistema host a través del escalamiento de privilegios. Para más información, véase el capítulo anterior.

### Monitoreo de Contenedores utilizando cAdvisor

cAdvisor es una herramienta de monitoreo de contenedores desarrollada por Google que proporciona información detallada sobre el uso de recursos y el rendimiento de los contenedores en tiempo real. cAdvisor recopila, agrega, procesa y exporta información sobre el uso de recursos por contenedor, como CPU, memoria, red y disco.

Podemos utilizar la demo de cAdvisor proporcionada realizando un pull desde Google Container Registry:

```bash
sudo docker run \
--volume=/:/rootfs:ro \
--volume=/var/run:/var/run:ro \
--volume=/sys:/sys:ro \
--volume=/var/lib/docker/:/var/lib/docker:ro \
--volume=/dev/disk/:/dev/disk:ro \
--publish=8080:8080 \
--detach=true \
--name=cadvisor \
gcr.io/google-containers/cadvisor:latest
```

Una vez cargado en un contenedor, podemos acceder a la aplicación por medio de la URL: [http://localhost:8080/containers/](http://localhost:8080/containers/)
